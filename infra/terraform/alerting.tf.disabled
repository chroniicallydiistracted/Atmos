# Enhanced alerting for AtmosInsight - Email, Discord, and SMS notifications

# SNS topic for critical alerts
resource "aws_sns_topic" "alerts" {
  name = "atmosinsight-alerts"
}

# Budget alarm for cost monitoring
resource "aws_budgets_budget" "monthly_cost" {
  name          = "atmosinsight-monthly-budget"
  budget_type   = "COST"
  limit_amount  = var.budget_limit
  limit_unit    = "USD"
  time_unit     = "MONTHLY"
  time_period_start = "2024-01-01_00:00"

  cost_filters = {}

  notification {
    comparison_operator        = "GREATER_THAN"
    threshold                 = 80
    threshold_type            = "PERCENTAGE"
    notification_type         = "ACTUAL"
    subscriber_email_addresses = [var.alert_email]
  }

  notification {
    comparison_operator        = "GREATER_THAN" 
    threshold                 = 100
    threshold_type            = "PERCENTAGE"
    notification_type          = "FORECASTED"
    subscriber_email_addresses = [var.alert_email]
  }
}

# CloudWatch alarms for Lambda function errors
resource "aws_cloudwatch_metric_alarm" "lambda_errors" {
  for_each = {
    healthz        = module.api.healthz_function_name
    tiler          = module.api.tiler_function_name
    radar_prepare  = module.api.radar_prepare_function_name
    goes_prepare   = module.api.goes_prepare_function_name
    mrms_prepare   = module.api.mrms_prepare_function_name
    alerts_bake    = module.api.alerts_bake_function_name
  }

  alarm_name          = "atmosinsight-${each.key}-errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "Errors"
  namespace           = "AWS/Lambda"
  period              = "300"
  statistic           = "Sum"
  threshold           = "5"
  alarm_description   = "Lambda function ${each.key} error rate"
  alarm_actions       = [aws_sns_topic.alerts.arn]

  dimensions = {
    FunctionName = each.value
  }
}

# CloudWatch alarm for API Gateway 4xx/5xx errors
resource "aws_cloudwatch_metric_alarm" "api_gateway_errors" {
  alarm_name          = "atmosinsight-api-errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "4XXError"
  namespace           = "AWS/ApiGateway"
  period              = "300"
  statistic           = "Sum"
  threshold           = "10"
  alarm_description   = "API Gateway 4xx error rate"
  alarm_actions       = [aws_sns_topic.alerts.arn]

  dimensions = {
    ApiName = "atmosinsight-api"
  }
}

# CloudWatch alarm for data freshness
resource "aws_cloudwatch_metric_alarm" "data_freshness" {
  alarm_name          = "atmosinsight-stale-data"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = "1"
  metric_name         = "DataFreshness"
  namespace           = "AtmosInsight"
  period              = "600"  # 10 minutes
  statistic           = "Maximum"
  threshold           = "1"
  alarm_description   = "Weather data is becoming stale (>10 min old)"
  alarm_actions       = [aws_sns_topic.alerts.arn]
  treat_missing_data  = "breaching"
}

# Lambda function for Discord webhook notifications
resource "aws_lambda_function" "discord_notifier" {
  filename         = "discord_notifier.zip"
  function_name    = "atmosinsight-discord-notifier"
  role            = aws_iam_role.discord_notifier_role.arn
  handler         = "handler.lambda_handler"
  runtime         = "python3.11"
  timeout         = 30

  environment {
    variables = {
      DISCORD_WEBHOOK_URL = var.discord_webhook_url
    }
  }
}

# SNS subscription for Discord notifications
resource "aws_sns_topic_subscription" "discord" {
  count     = var.discord_webhook_url != "" ? 1 : 0
  topic_arn = aws_sns_topic.alerts.arn
  protocol  = "lambda"
  endpoint  = aws_lambda_function.discord_notifier.arn
}

# Lambda permission for SNS to invoke Discord notifier
resource "aws_lambda_permission" "sns_discord" {
  count         = var.discord_webhook_url != "" ? 1 : 0
  statement_id  = "AllowExecutionFromSNS"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.discord_notifier.function_name
  principal     = "sns.amazonaws.com"
  source_arn    = aws_sns_topic.alerts.arn
}

# IAM role for Discord notifier
resource "aws_iam_role" "discord_notifier_role" {
  name = "atmosinsight-discord-notifier"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "discord_notifier_basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.discord_notifier_role.name
}

# Lambda function for Twilio SMS notifications
resource "aws_lambda_function" "sms_notifier" {
  filename         = "sms_notifier.zip"
  function_name    = "atmosinsight-sms-notifier"
  role            = aws_iam_role.sms_notifier_role.arn
  handler         = "handler.lambda_handler"
  runtime         = "python3.11"
  timeout         = 30

  environment {
    variables = {
      TWILIO_ACCOUNT_SID = var.twilio_account_sid
      TWILIO_AUTH_TOKEN  = var.twilio_auth_token
      TWILIO_FROM_PHONE  = var.twilio_from_phone
      ALERT_PHONE        = var.alert_phone
    }
  }
}

# SNS subscription for SMS notifications
resource "aws_sns_topic_subscription" "sms" {
  count     = var.twilio_account_sid != "" ? 1 : 0
  topic_arn = aws_sns_topic.alerts.arn
  protocol  = "lambda"
  endpoint  = aws_lambda_function.sms_notifier.arn
}

# Lambda permission for SNS to invoke SMS notifier
resource "aws_lambda_permission" "sns_sms" {
  count         = var.twilio_account_sid != "" ? 1 : 0
  statement_id  = "AllowExecutionFromSNS"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.sms_notifier.function_name
  principal     = "sns.amazonaws.com"
  source_arn    = aws_sns_topic.alerts.arn
}

# IAM role for SMS notifier
resource "aws_iam_role" "sms_notifier_role" {
  name = "atmosinsight-sms-notifier"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "sms_notifier_basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.sms_notifier_role.name
}

# Email subscription to SNS (always enabled)
resource "aws_sns_topic_subscription" "email" {
  topic_arn = aws_sns_topic.alerts.arn
  protocol  = "email"
  endpoint  = var.alert_email
}

# Dashboard for monitoring key metrics
resource "aws_cloudwatch_dashboard" "atmosinsight" {
  dashboard_name = "AtmosInsight-Operations"

  dashboard_body = jsonencode({
    widgets = [
      {
        type   = "metric"
        x      = 0
        y      = 0
        width  = 12
        height = 6

        properties = {
          metrics = [
            ["AWS/Lambda", "Duration", "FunctionName", module.api.healthz_function_name],
            [".", "Errors", ".", "."],
            [".", "Invocations", ".", "."]
          ]
          period = 300
          stat   = "Average"
          region = var.region
          title  = "Health Check Lambda Metrics"
        }
      },
      {
        type   = "metric"
        x      = 0
        y      = 6
        width  = 12
        height = 6

        properties = {
          metrics = [
            ["AWS/ApiGateway", "Count", "ApiName", "atmosinsight-api"],
            [".", "Latency", ".", "."],
            [".", "4XXError", ".", "."],
            [".", "5XXError", ".", "."]
          ]
          period = 300
          stat   = "Sum"
          region = var.region
          title  = "API Gateway Metrics"
        }
      }
    ]
  })
}