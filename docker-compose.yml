services:
  reverse-proxy:
    image: caddy:2
    env_file: ./config/.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./data/basemaps:/srv/basemaps:ro
    depends_on:
      - api
      - object-store
      - tiler
    restart: unless-stopped

  object-store:
    image: minio/minio:latest
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9090}"
    env_file: ./config/.env
    environment:
      MINIO_VOLUMES: /data
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    restart: unless-stopped

  object-store-init:
    image: minio/mc:latest
    env_file: ./config/.env
    depends_on:
      - object-store
    entrypoint: ["/bin/sh","-c"]
    command: >-
      set -e;
      until /usr/bin/mc alias set local ${MINIO_ENDPOINT:-http://object-store:9000} ${MINIO_ROOT_USER:-localminio} ${MINIO_ROOT_PASSWORD:-change-me-now}; do echo 'Waiting for MinIO...'; sleep 2; done;
      /usr/bin/mc mb -p local/${S3_BUCKET_RAW:-raw} || true;
      /usr/bin/mc mb -p local/${S3_BUCKET_DERIVED:-derived} || true;
      /usr/bin/mc mb -p local/${S3_BUCKET_TILES:-tiles} || true;
      /usr/bin/mc mb -p local/${S3_BUCKET_LOGS:-logs} || true;
      echo 'MinIO buckets ensured.'
    restart: "on-failure"

  postgres:
    image: postgis/postgis:15-3.4
    env_file: ./config/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-osm} -d ${POSTGRES_DB:-osm} -h 127.0.0.1 -p ${POSTGRES_PORT:-5432}"]
      interval: 5s
      timeout: 5s
      retries: 10

  ingestion:
    build:
      context: ..
      dockerfile: local/services/ingestion/Dockerfile
    env_file: ./config/.env
    volumes:
      - ./services/ingestion/src:/app/local/services/ingestion/src
      - ./data/raw:/data/raw
    depends_on:
      - object-store
    ports:
      - "8084:8084"
    restart: unless-stopped

  basemap:
    build: ./services/basemap
    env_file: ./config/.env
    volumes:
      - ./services/basemap/src:/app/src
      - ./data/basemaps:/app/data
    depends_on:
      - postgres
    ports:
      - "8082:8082"
    restart: unless-stopped

  api:
    build: ./services/api
    env_file: ./config/.env
    depends_on:
      object-store:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    volumes:
      - ./services/api/src:/app/src
    restart: unless-stopped

  tiler:
    build: ./services/tiler
    env_file: ./config/.env
    depends_on:
      - object-store
    ports:
      - "8083:8083"
    restart: unless-stopped

  frontend:
    build: ./services/frontend
    env_file: ./config/.env
    depends_on:
      - api
    ports:
      - "4173:4173"
    volumes:
      - ./services/frontend/src:/app/src
      - ./services/frontend/index.html:/app/index.html
      - ./services/frontend/vite.config.ts:/app/vite.config.ts
      - ./services/frontend/tsconfig.json:/app/tsconfig.json
      - ./services/frontend/tsconfig.node.json:/app/tsconfig.node.json
      - ./services/frontend/vitest.setup.ts:/app/vitest.setup.ts
      - ./services/frontend/package.json:/app/package.json
      - ./services/frontend/public:/app/public
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "4173"]
    restart: unless-stopped

  monitoring:
    build: ./services/monitoring
    env_file: ./config/.env
    restart: unless-stopped

volumes:
  caddy_data:
  caddy_config:
  minio_data:
  postgres_data:
